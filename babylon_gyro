<!DOCTYPE html>
<!-- Babylon.js, Gyroscope (hand-held smart phone/tablet PC), Signalr  -->
<!-- Yong-Jun Shin, UCONN Computational and Systems Medicine Lab, 2016  -->
<!-- csml.uconn.edu -->
<html>
<head>
    <title>BabylonGyro</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            position:absolute; 
            top:250px; 
            left:0px; 
            z-index:2
        }
    </style>
</head>
<body>
    <canvas id="renderCanvas"></canvas> 

    <!-- Display device orientation 
    The DeviceOrientationEvent.alpha value represents the motion of the device around the z axis, represented in degrees with values ranging from 0 to 360.
    The DeviceOrientationEvent.beta value represents the motion of the device around the x axis, represented in degrees with values ranging from -180 to 180. This represents a front to back motion of the device.
    The DeviceOrientationEvent.gamma value represents the motion of the device around the y axis, represented in degrees with values ranging from -90 to 90. This represents a left to right motion of the device.
    -->
    <font face="verdana" color="black"> Rotate the device left or right <p></p>
    <font face="verdana" color="red"> Alpha: </font> <div id="alpha" font face="verdana"></div>
    <font face="verdana" color="green"> Beta: </font> <div id="beta" font face="verdana"></div>
    <font face="verdana" color="blue"> Gamma: </font> <div id="gamma" font face="verdana"></div>

    <!-- Babylon.js -->
    <script src="http://www.babylonjs.com/hand.minified-1.2.js"></script>
    <script src="http://www.babylonjs.com/oimo.js"></script>  <!-- physics engine -->
    <script src="http://www.babylonjs.com/babylon.js"></script>

    <!-- jQuery -->
    <script src="Scripts/jquery-1.6.4.min.js"></script>

    <!-- SignalR library -->
    <script src="Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="signalr/hubs"></script>   <!-- The autogenerated SignalR hub script -->

    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">

     // Part 1: Signalr
     $(function () {
         // Declare a proxy to reference the hub.
         var chat = $.connection.gyroHub;

         // Create a function that the hub can call to broadcast messages.
         chat.client.broadcastMessage = function (alpha, beta, gamma){
            // Show alpha, beta, gamma values received from the hub
            document.getElementById('alpha').innerHTML = alpha;
            document.getElementById('beta').innerHTML = beta;
            document.getElementById('gamma').innerHTML = gamma;
         };

         // Start the connection.
         $.connection.hub.start().done(function () {
            // When device orientation changes, execute handleOrientation
            window.addEventListener("deviceorientation", handleOrientation, true);
            function handleOrientation(event) {
               var absolute = event.absolute;
               var alpha = event.alpha;
               var beta = event.beta;
               var gamma = event.gamma;
               // Send alpha, beta, gamma to the hub
               chat.server.send(alpha, beta, gamma);
           };
        });
      });
         
     // Part 2: Babylon.js
     var canvas = document.getElementById("renderCanvas");
     var engine = new BABYLON.Engine(canvas, true);
     var createScene = function () {
         // This creates a basic Babylon Scene object (non-mesh)
         var scene = new BABYLON.Scene(engine);

         // Enable physics
         scene.enablePhysics(new BABYLON.Vector3(0, -980, 0), new BABYLON.OimoJSPlugin());

         // Camera
         // ArcRotateCamera >> Camera turning around a 3D point (here Vector zero) with mouse and cursor keys
         // Parameters : name, alpha, beta, radius, target, scene
         var camera = new BABYLON.ArcRotateCamera("Camera", 0, 1, 800, new BABYLON.Vector3(15, 15, 15), scene);
         camera.attachControl(canvas, true);

         // Light
         var light = new BABYLON.PointLight("Light", new BABYLON.Vector3(20, 20, 20), scene);
         light.diffuse = new BABYLON.Color3(1, 0.8, 1);
         light.specular = new BABYLON.Color3(0.7, 1, 1);
         light.intensity = 1;

         // Ball material
         materialBall = new BABYLON.StandardMaterial("Ball Material", scene);
         materialBall.diffuseColor = new BABYLON.Color3(0.2, 0.8, 0.2);
         materialBall.specularColor = new BABYLON.Color3(0.2, 0.8, 0.2);

         // Create ball
         //(name of the sphere, segments, diameter, scene) 
         var ball = BABYLON.Mesh.CreateSphere("Ball", 100.0, 20, scene);
         ball.material = materialBall;
         ball.material.alpha = 1;
         // Inital ball position
         ball.position.x = 0;
         ball.position.y = 100;
         ball.position.z = 0;
         // Enable physics
         ball.body = ball.setPhysicsState(BABYLON.PhysicsEngine.SphereImpostor, {
             mass: 10,
         });
         

         // Ground material
         materialGround= new BABYLON.StandardMaterial("Ground Material", scene);
         materialGround.diffuseColor = new BABYLON.Color3(0.7, 0.3, 0.2);
         materialGround.specularColor = new BABYLON.Color3(0.6, 0.3, 0.2);

         //Create ground
         //(name of the plane, size, scene)
         var ground = BABYLON.Mesh.CreateBox("box", 10.0, scene);
         ground.scaling.x = 30;
         ground.scaling.z = 30;
         ground.material = materialGround;
         ground.material.alpha = 0.9;
         // Enable physics
         ground.body = ground.setPhysicsState(BABYLON.PhysicsEngine.BoxImpostor, {
            mass: 0,
            friction: 1.5,
            restitution: 1
         });

         //Background color
         scene.clearColor = new BABYLON.Color3(1, 1, 1);

        //Update before rendering
        scene.registerBeforeRender(function () {
             ground.updatePhysicsBodyPosition();
             var mq = ground.rotationQuaternion;
             // create quaternion to add
             var q = BABYLON.Quaternion.RotationYawPitchRoll(0, document.getElementById('gamma').innerHTML / 1200, 0);
             ground.rotationQuaternion = q.multiply(mq);
             ground.body.body.setQuaternion(ground.rotationQuaternion);
             ground.body.body.sleeping = false;
         });
         return scene;
     };

     var scene = createScene();
     engine.runRenderLoop(function () {
          scene.render();
     });

     // Resize
     window.addEventListener("resize", function () {
          engine.resize();
     });
  </script>
</body>
</html>
